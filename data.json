[{"title": "Flowbite Horizontal Card", "content": "<a href=\"#\" class=\"flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700\">\r\n    <img class=\"object-cover w-full rounded-t-lg h-96 md:h-auto md:w-48 md:rounded-none md:rounded-s-lg\" src=\"/docs/images/blog/image-4.jpg\" alt=\"\">\r\n    <div class=\"flex flex-col justify-between p-4 leading-normal\">\r\n        <h5 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">Noteworthy technology acquisitions 2021</h5>\r\n        <p class=\"mb-3 font-normal text-gray-700 dark:text-gray-400\">Here are the biggest enterprise technology acquisitions of 2021 so far, in reverse chronological order.</p>\r\n    </div>\r\n</a>", "description": "If you want to spice up your cards you can use the following card which has its child elements aligned horizontally.", "lang": "HTML5", "tags": ["flowbite", "tailwind"], "id": "72cc7def-703b-4f5a-a01f-bbd8f96ba55d", "createdAt": 1704683273, "updatedAt": 1704792688}, {"title": "Structs in C", "content": "const int MAX_SIZE = 1000;\r\ntypedef unsigned int uint;\r\n\r\nstruct PhoneNumber {\r\n\tstring zipCode;\r\n\tstring digits;\r\n};\r\n\r\nstruct Date {\r\n\tuint date;\r\n\tuint month;\r\n\tuint year;\r\n};\r\n\r\nstruct Subscription {\r\n\tuint id;\r\n\tstring fullName;\r\n\tstring address;\r\n\tPhoneNumber phoneNumber;\r\n\tDate contractDate;\r\n};\r\n\r\ntypedef Subscription Subscriptions[MAX_SIZE];", "description": "Sample structs in C with examples of a subscriptions management app", "lang": "C", "tags": ["structs"], "id": "902b2317-7c3a-4929-8267-29bc74c37e76", "createdAt": 1704687442, "updatedAt": 1704792998}, {"title": "Implementation of a hash table in C++", "content": "template <typename V>\r\nclass HashTable {\r\npublic:\r\n\tuint n;\r\n\r\n\tV get(string key) {\r\n\t\tint hashIndex = hash(key);\r\n\t\tint originalHashIndex = hashIndex;\r\n\t\twhile (keys[hashIndex] != key) {\r\n\t\t\thashIndex++;\r\n\t\t\thashIndex %= n;\r\n\t\t\tif (hashIndex == originalHashIndex) return -1;\r\n\t\t}\r\n\t\treturn values[hashIndex];\r\n\t}\r\n\r\n\tvoid put(string key, V value) {\r\n\t\tint hashIndex = hash(key);\r\n\t\twhile (keys[hashIndex] != \"\") {\r\n\t\t\thashIndex++;\r\n\t\t\thashIndex %= n;\r\n\t\t}\r\n\t\tkeys[hashIndex] = key;\r\n\t\tvalues[hashIndex] = value;\r\n\t\tn++;\r\n\t}\r\n\r\n\tvoid update(string key, V value) {\r\n\t\tint hashIndex = hash(key);\r\n\t\tint originalHashIndex = hashIndex;\r\n\t\twhile (keys[hashIndex] != key) {\r\n\t\t\thashIndex++;\r\n\t\t\thashIndex %= n;\r\n\t\t\tif (hashIndex == originalHashIndex) return;\r\n\t\t}\r\n\t\tvalues[hashIndex] = value;\r\n\t}\r\n\r\n\tvoid entries() {\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tif (keys[i] != \"\")\r\n\t\t\t\tcout << setw(15) << keys[i]\r\n\t\t\t\t<< setw(10) << get(keys[i]) << endl;\r\n\t\t}\r\n\t}\r\n\r\n\tHashTable<V>(uint size) {\r\n\t\tn = size;\r\n\t}\r\n\r\nprivate:\r\n\tstring keys[MAX_SIZE];\r\n\tV values[MAX_SIZE];\r\n\r\n\tint hash(string key) {\r\n\t\treturn key.length() % n;\r\n\t}\r\n};", "description": "A simple hash table implemented using C++ (no map library)", "lang": "C++", "tags": ["hash table", "dsa"], "id": "e93b1925-e160-4e8d-9e54-2593e3e978ac", "createdAt": 1704788900, "updatedAt": 1704792607}]