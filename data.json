[{"title": "Flowbite Horizontal Card", "content": "<a href=\"#\" class=\"flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700\">\r\n    <img class=\"object-cover w-full rounded-t-lg h-96 md:h-auto md:w-48 md:rounded-none md:rounded-s-lg\" src=\"/docs/images/blog/image-4.jpg\" alt=\"\">\r\n    <div class=\"flex flex-col justify-between p-4 leading-normal\">\r\n        <h5 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">Noteworthy technology acquisitions 2021</h5>\r\n        <p class=\"mb-3 font-normal text-gray-700 dark:text-gray-400\">Here are the biggest enterprise technology acquisitions of 2021 so far, in reverse chronological order.</p>\r\n    </div>\r\n</a>", "description": "If you want to spice up your cards you can use the following card which has its child elements aligned horizontally.", "lang": "HTML5", "tags": ["flowbite", "tailwind"], "id": "72cc7def-703b-4f5a-a01f-bbd8f96ba55d", "createdAt": 1704683273, "updatedAt": 1704792688}, {"title": "Structs in C", "content": "const int MAX_SIZE = 1000;\r\ntypedef unsigned int uint;\r\n\r\nstruct PhoneNumber {\r\n\tstring zipCode;\r\n\tstring digits;\r\n};\r\n\r\nstruct Date {\r\n\tuint date;\r\n\tuint month;\r\n\tuint year;\r\n};\r\n\r\nstruct Subscription {\r\n\tuint id;\r\n\tstring fullName;\r\n\tstring address;\r\n\tPhoneNumber phoneNumber;\r\n\tDate contractDate;\r\n};\r\n\r\ntypedef Subscription Subscriptions[MAX_SIZE];", "description": "Sample structs in C with examples of a subscriptions management app", "lang": "C", "tags": ["structs"], "id": "902b2317-7c3a-4929-8267-29bc74c37e76", "createdAt": 1704687442, "updatedAt": 1704792998}, {"title": "Implementation of a hash table in C++", "content": "template <typename V>\r\nclass HashTable {\r\npublic:\r\n\tuint n;\r\n\r\n\tV get(string key) {\r\n\t\tint hashIndex = hash(key);\r\n\t\tint originalHashIndex = hashIndex;\r\n\t\twhile (keys[hashIndex] != key) {\r\n\t\t\thashIndex++;\r\n\t\t\thashIndex %= n;\r\n\t\t\tif (hashIndex == originalHashIndex) return -1;\r\n\t\t}\r\n\t\treturn values[hashIndex];\r\n\t}\r\n\r\n\tvoid put(string key, V value) {\r\n\t\tint hashIndex = hash(key);\r\n\t\twhile (keys[hashIndex] != \"\") {\r\n\t\t\thashIndex++;\r\n\t\t\thashIndex %= n;\r\n\t\t}\r\n\t\tkeys[hashIndex] = key;\r\n\t\tvalues[hashIndex] = value;\r\n\t\tn++;\r\n\t}\r\n\r\n\tvoid update(string key, V value) {\r\n\t\tint hashIndex = hash(key);\r\n\t\tint originalHashIndex = hashIndex;\r\n\t\twhile (keys[hashIndex] != key) {\r\n\t\t\thashIndex++;\r\n\t\t\thashIndex %= n;\r\n\t\t\tif (hashIndex == originalHashIndex) return;\r\n\t\t}\r\n\t\tvalues[hashIndex] = value;\r\n\t}\r\n\r\n\tvoid entries() {\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tif (keys[i] != \"\")\r\n\t\t\t\tcout << setw(15) << keys[i]\r\n\t\t\t\t<< setw(10) << get(keys[i]) << endl;\r\n\t\t}\r\n\t}\r\n\r\n\tHashTable<V>(uint size) {\r\n\t\tn = size;\r\n\t}\r\n\r\nprivate:\r\n\tstring keys[MAX_SIZE];\r\n\tV values[MAX_SIZE];\r\n\r\n\tint hash(string key) {\r\n\t\treturn key.length() % n;\r\n\t}\r\n};", "description": "A simple hash table implemented using C++ (no map library)", "lang": "C++", "tags": ["hash table", "dsa"], "id": "e93b1925-e160-4e8d-9e54-2593e3e978ac", "createdAt": 1704788900, "updatedAt": 1704792607}, {"title": "Sort descending in Python", "content": "a = (\"h\", \"b\", \"a\", \"c\", \"f\", \"d\", \"e\", \"g\")\r\nx = sorted(a, reverse=True)\r\nprint(x)", "description": "Sample code how to sort a list of numbers in reverse (descending) order in Python", "lang": "Python", "tags": ["sort"], "id": "65a28269-3a3d-4d2d-a031-bca9284b5d0e", "createdAt": 1704868515, "updatedAt": 1704869931}, {"title": "Sign-in and registration form in TailwindCSS", "content": "<!--\r\n  This example requires some changes to your config:\r\n  \r\n  ```\r\n  // tailwind.config.js\r\n  module.exports = {\r\n    // ...\r\n    plugins: [\r\n      // ...\r\n      require('@tailwindcss/forms'),\r\n    ],\r\n  }\r\n  ```\r\n-->\r\n<!--\r\n  This example requires updating your template:\r\n\r\n  ```\r\n  <html class=\"h-full bg-white\">\r\n  <body class=\"h-full\">\r\n  ```\r\n-->\r\n<div class=\"flex min-h-full flex-col justify-center px-6 py-12 lg:px-8\">\r\n  <div class=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n    <img class=\"mx-auto h-10 w-auto\" src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600\" alt=\"Your Company\">\r\n    <h2 class=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">Sign in to your account</h2>\r\n  </div>\r\n\r\n  <div class=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n    <form class=\"space-y-6\" action=\"#\" method=\"POST\">\r\n      <div>\r\n        <label for=\"email\" class=\"block text-sm font-medium leading-6 text-gray-900\">Email address</label>\r\n        <div class=\"mt-2\">\r\n          <input id=\"email\" name=\"email\" type=\"email\" autocomplete=\"email\" required class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\">\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <div class=\"flex items-center justify-between\">\r\n          <label for=\"password\" class=\"block text-sm font-medium leading-6 text-gray-900\">Password</label>\r\n          <div class=\"text-sm\">\r\n            <a href=\"#\" class=\"font-semibold text-indigo-600 hover:text-indigo-500\">Forgot password?</a>\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2\">\r\n          <input id=\"password\" name=\"password\" type=\"password\" autocomplete=\"current-password\" required class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\">\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"submit\" class=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\">Sign in</button>\r\n      </div>\r\n    </form>\r\n\r\n    <p class=\"mt-10 text-center text-sm text-gray-500\">\r\n      Not a member?\r\n      <a href=\"#\" class=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\">Start a 14 day free trial</a>\r\n    </p>\r\n  </div>\r\n</div>", "description": "Simple variant of a sign-in and registration form built with TailwindCSS\r\nLink: https://tailwindui.com/components/application-ui/forms/sign-in-forms#component-766a0bf1b8800d383b6c5b77ef9c626c", "lang": "HTML5", "tags": ["tailwind"], "id": "26c3745e-c7e4-44b8-83f9-34c57af5f714", "createdAt": 1704868900}, {"title": "Polymorphism in C++ OOP", "content": "// Base class\r\nclass Animal {\r\n  public:\r\n    void animalSound() {\r\n      cout << \"The animal makes a sound \\n\";\r\n    }\r\n};\r\n\r\n// Derived class\r\nclass Pig : public Animal {\r\n  public:\r\n    void animalSound() {\r\n      cout << \"The pig says: wee wee \\n\";\r\n    }\r\n};\r\n\r\n// Derived class\r\nclass Dog : public Animal {\r\n  public:\r\n    void animalSound() {\r\n      cout << \"The dog says: bow wow \\n\";\r\n    }\r\n};", "description": "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\r\n\r\nLike we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.\r\n\r\nFor example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):", "lang": "C++", "tags": ["oop"], "id": "366f2177-bac4-47db-b021-e59c9f523aa7", "createdAt": 1704868977}, {"title": "Bubble Sort in C", "content": "void Swap(Subscription& s1, Subscription& s2);\r\nvoid SortAscByNameThenDescByPhoneNo(Subscriptions subscriptions, uint n) {\r\n\tfor (int i = 0; i < n - 1; i++)\r\n\t\tfor (int j = i + 1; j < n; j++) {\r\n\t\t\tint difference = subscriptions[i].fullName.compare(subscriptions[j].fullName);\r\n\t\t\tbool cond = difference > 0 || (difference == 0 && subscriptions[i].phoneNumber.digits.compare(subscriptions[j].phoneNumber.digits) < 0);\r\n\t\t\tif (cond) Swap(subscriptions[i], subscriptions[j]);\r\n\t\t}\r\n}\r\n\r\nvoid Swap(Subscription& s1, Subscription& s2) {\r\n    Subscription temp = s1;\r\n    s1 = s2;\r\n    s2 = temp;\r\n}", "description": "In Bubble Sort algorithm, \r\n- Traverse from left and compare adjacent elements and the higher one is placed at right side. \r\n- In this way, the largest element is moved to the rightmost end at first. \r\n- This process is then continued to find the second largest and place it and so on until the data is sorted.\r\nHere's an example with sorting subscriptions by phone number descending, then in ascending order by owner's name", "lang": "C", "tags": ["structs", "sort", "dsa"], "id": "86d3f228-f6a9-473b-a3db-1c8241fb305a", "createdAt": 1704869192, "updatedAt": 1704870455}, {"title": "Remove a Character or Substring from a String", "content": "// Removing a character at a given index:\r\nfunction removeCharacterAtIndex(string, index) {\r\n    subString1 = string.substring(0, index);\r\n    subString2 = string.substring(index + 1, string.length);\r\n    return subString1 + subString2;\r\n}\r\n\r\n// Removing a substring from a string:\r\n\"example string\".replace(\"strin\", \"\") // \"example g\"", "description": "Simple examples showing how to remove a character or group of characters from a string.", "lang": "Javascript", "tags": ["strings", "utils"], "id": "2fb077f9-8f6c-475e-a3f6-c62b7eb02311", "createdAt": 1704869348}, {"title": "Inheritance (Derived and Base Class)", "content": "class Vehicle  // base class (parent) \r\n{\r\n  public string brand = \"Ford\";  // Vehicle field\r\n  public void honk()             // Vehicle method \r\n  {                    \r\n    Console.WriteLine(\"Tuut, tuut!\");\r\n  }\r\n}\r\n\r\nclass Car : Vehicle  // derived class (child)\r\n{\r\n  public string modelName = \"Mustang\";  // Car field\r\n}\r\n\r\nclass Program\r\n{\r\n  static void Main(string[] args)\r\n  {\r\n    // Create a myCar object\r\n    Car myCar = new Car();\r\n\r\n    // Call the honk() method (From the Vehicle class) on the myCar object\r\n    myCar.honk();\r\n\r\n    // Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class\r\n    Console.WriteLine(myCar.brand + \" \" + myCar.modelName);\r\n  }\r\n}", "description": "In C#, it is possible to inherit fields and methods from one class to another. We group the \"inheritance concept\" into two categories:\r\n\r\nDerived Class (child) - the class that inherits from another class\r\nBase Class (parent) - the class being inherited from\r\nTo inherit from a class, use the : symbol.\r\n\r\nIn the example below, the Car class (child) inherits the fields and methods from the Vehicle class (parent):", "lang": "C#", "tags": ["oop"], "id": "bb58d7c1-54b5-4685-ba1a-6bd368d78931", "createdAt": 1704869403}, {"title": "Beauty of JS array methods", "content": "const pluckDeep = key => obj => key.split('.').reduce((accum, key) => accum[key], obj)\r\n\r\nconst compose = (...fns) => res => fns.reduce((accum, next) => next(accum), res)\r\n\r\nconst unfold = (f, seed) => {\r\n  const go = (f, seed, acc) => {\r\n    const res = f(seed)\r\n    return res ? go(f, res[1], acc.concat([res[0]])) : acc\r\n  }\r\n  return go(f, seed, [])\r\n}", "description": "Elegant of JS array methods combining with arrow functions", "lang": "Javascript", "tags": ["utils"], "id": "34c54588-692e-4134-be8e-9ef2d871397e", "createdAt": 1704869880}]